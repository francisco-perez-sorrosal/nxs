[project]
name = "nxs"
version = "0.0.1"
description = "Nexus command control with Claude integration and MCP-based CLI"
readme = "README.md"
authors = [
    {name = "Francisco Perez-Sorrosal", email = "fperezsorrosal@gmail.com"}
]
requires-python = ">=3.11"
dependencies = [
    "anthropic>=0.71.0",
    "loguru>=0.7.2",
    "mcp[cli]>=1.18.0",
    "python-dotenv>=1.1.1",
    "textual>=0.50.0",
    "rich>=13.7.0",
    "textual-autocomplete>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/nxs"]

[tool.hatch.build]
include = ["src/nxs/**"]

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["osx-arm64", "osx-64", "linux-64"]

[tool.pixi.tasks]
# Main application tasks
start = { cmd = "python -m nxs", env = { PYTHONPATH = "src" } }
chat = { cmd = "python -m nxs", env = { PYTHONPATH = "src" } }
server = { cmd = "python -m nxs.mcp_server", env = { PYTHONPATH = "src" } }
client = { cmd = "python -m nxs.mcp_client", env = { PYTHONPATH = "src" } }

# Environment setup
dev-install = { cmd = "pip install -e .", cwd = "." }
clean = { cmd = ["rm", "-rf", "dist/", "build/", "*.egg-info/", ".coverage", "htmlcov/", ".pytest_cache/", ".mypy_cache/"] }

[dependency-groups]
test = ["pytest", "pytest-cov", "pytest-asyncio"]
dev = ["black", "ruff", "mypy", "pre-commit"]

[tool.pixi.environments]
default = { solve-group = "default" }
test = { features = ["test"], solve-group = "default" }
dev = { features = ["dev", "test"], solve-group = "test" }

[tool.pixi.feature.test.tasks]
test = "pytest tests/"
test-cov = "pytest --cov=. --cov-report=html tests/"

[tool.pixi.feature.dev.tasks]
lint = "ruff check ."
lint-fix = "ruff check --fix ."
format = "black ."
type-check = "mypy ."
ci = { depends-on = ["format", "lint", "type-check", "test"] }


[tool.black]
line-length = 120
target-version = ['py311']

# Ruff configuration is in ruff.toml

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Allow untyped functions for now
disallow_incomplete_defs = false  # Allow incomplete type annotations
check_untyped_defs = true
disallow_untyped_decorators = false  # Allow untyped decorators
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Relaxed settings for better development experience
ignore_missing_imports = true
allow_redefinition = true
allow_untyped_globals = true
allow_untyped_calls = true
allow_incomplete_defs = true
allow_any_generics = true

# Additional relaxed settings
disable_error_code = ["no-any-return", "return-value", "unreachable", "typeddict-item", "var-annotated"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
pythonpath = ["src"]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*.pyc", "__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
